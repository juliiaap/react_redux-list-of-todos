{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/NoMatches/NoMatches.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialFilter","query","status","value","filterReducer","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","NoMatches","className","TodoList","dispatch","todosList","useState","currentTodosList","setCurrentTodosList","useEffect","newTodosList","completed","title","toLowerCase","includes","handleTodosFilter","length","map","id","onClick","currentTodoActions","handleShowModal","TodoFilter","onSubmit","event","preventDefault","onChange","newFilter","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userInfo","setUserInfo","isLoading","setIsLoading","handleTodoModal","a","userId","userInfoFromServer","console","error","href","email","name","App","isInitialized","setIsInitialized","handleFetch","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"oOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OC5BPE,EAAwB,CAC5BC,MAAO,GACPC,OAAQ,OAkBGT,EAVD,iBAAkB,CAAEE,KAAM,aAAcC,QAAS,QAUhDH,EATE,iBAAqB,CAClCE,KAAM,gBACNC,QAAS,WAOEH,EALK,iBAAwB,CACxCE,KAAM,mBACNC,QAAS,cAGEH,EAfI,SAACU,GAAD,MAAiC,CAChDR,KAAM,eACNC,QAASO,IAsDIC,EAlCO,WAGR,IAFZN,EAEW,uDAFKE,EAChBD,EACW,uCACX,OAAQA,EAAOJ,MACb,IAAK,gBAML,IAAK,aAML,IAAK,mBACH,OAAO,2BACFG,GADL,IAEEI,OAAQH,EAAOH,UAGnB,IAAK,eACH,OAAO,2BACFE,GADL,IAEEG,MAAOF,EAAOH,UAGlB,QACE,OAAOE,I,QC1DAL,EALD,SAACU,GAAD,MAA8B,CACxCR,KAAM,YACNC,QAASO,IAkBIE,EAbM,WAGH,IAFhBC,EAEe,uDAFK,GACpBP,EACe,uCACf,MACO,cADCA,EAAOJ,KAEL,GAAN,mBAAWW,GAAX,YAAqBP,EAAOH,UAGrBU,GCXPC,EAAcC,0BAAgB,CAClCC,YAAaZ,EACba,OAAQN,EACRE,MAAOD,IAIIM,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,sCCfPC,G,YAAoCC,KACpCC,EAAkDC,I,OCJlDC,EAAY,kBACvB,mBAAGC,UAAU,0BAAb,kECKWC,EAAqB,WAChC,IAAMC,EAAWP,IACXQ,EAAYN,GAAe,SAACpB,GAAD,OAAWA,EAAMQ,SAClD,EAA0BY,GAAe,SAACpB,GAAD,OAAWA,EAAMY,UAAlDT,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTO,EAAcS,GAAe,SAACpB,GAAD,OAAWA,EAAMW,eACpD,EAAgDgB,mBAASD,GAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KA8BA,OAJAC,qBAAU,YAxBgB,WACxB,IAaMC,EAbqBL,EAAUd,QAAO,SAAChB,GAC3C,OAAQQ,GACN,IAAK,SACH,OAAQR,EAAKoC,UAEf,IAAK,YACH,OAAOpC,EAAKoC,UAEd,QACE,OAAOpC,MAKVgB,QAAO,SAAChB,GAAD,OAAUA,EAAKqC,MAAMC,cAAcC,SAAShC,MAEtD0B,EAAoBE,GAQpBK,KACC,CAACjC,EAAOC,IAGT,mCACIwB,EAAiBS,OAGjB,wBAAOd,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGK,EAAiBU,KAAI,SAAC1C,GAAD,OACpB,qBAAI,UAAQ,OAAZ,UACE,oBAAI2B,UAAU,eAAd,SAA8B3B,EAAK2C,KACnC,oBAAIhB,UAAU,eAAd,SACG3B,EAAKoC,WACJ,sBAAMT,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UACE3B,EAAKoC,UAAY,mBAAqB,kBAF1C,SAKGpC,EAAKqC,UAIV,oBAAIV,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV1B,KAAK,SACL2C,QAAS,kBAxDH,SAAC5C,GACvB6B,EAASgB,EAA2B7C,IAuDL8C,CAAgB9C,IAJjC,SAME,sBAAM2B,UAAU,OAAhB,SACE,mBACEA,UACE3B,EAAK2C,MAAL,OAAY5B,QAAZ,IAAYA,OAAZ,EAAYA,EAAa4B,IACrB,mBACA,uBAhCQ3C,EAAK2C,YApBnC,cAAC,EAAD,OCnCKI,EAAuB,WAClC,IAAMlB,EAAWP,IACjB,EAA0BE,GAAe,SAAApB,GAAK,OAAIA,EAAMY,UAAhDT,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAiCf,OACE,uBACEmB,UAAU,mBACVqB,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGvB,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRlB,MAAOD,EACP2C,SAzCiB,SAACF,GAC1B,IAAMG,EAAYH,EAAMI,OAAO5C,MAE/B,GAVK,CAAC,MAAO,SAAU,aAAa8B,SAUba,GACrB,OAAQA,GACN,IAAK,SACHvB,EAASyB,KACT,MAEF,IAAK,MACHzB,EAASyB,KACT,MAEF,IAAK,YACHzB,EAASyB,OAwBT,UAKE,wBAAQ7C,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGkB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR1B,KAAK,OACL0B,UAAU,QACV4B,YAAY,YACZ9C,MAAOF,EACP4C,SAlCkB,SAACF,GACzBpB,EAASyB,EAAuBL,EAAMI,OAAO5C,MAAM6B,mBAmC/C,sBAAMX,UAAU,eAAhB,SACE,mBAAGA,UAAU,gCAGZpB,EAAMkC,QACP,sBAAMd,UAAU,gBAAgB6B,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACRxD,KAAK,SACL0B,UAAU,SACV,aAAW,oBACXiB,QA3Ca,WACvBf,EAASyB,EAAuB,iBCtCvBI,G,MAAmB,kBAC9B,qBAAK/B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASgC,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,IAAMzC,EAAWP,IACXP,EAAcS,GAAe,SAACpB,GAAD,OAAWA,EAAMW,eACpD,EAAgCgB,mBAAsB,MAAtD,mBAAOwC,EAAP,KAAiBC,EAAjB,KACA,EAAkCzC,oBAAS,GAA3C,mBAAO0C,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,uCAAG,4BAAAC,EAAA,yDACjB7D,EADiB,wDAKtB2D,GAAa,GALS,kBDUFG,ECFuB9D,EAAY8D,ODEhBlB,EAAG,iBAAiBkB,ICVrC,OAQdC,EARc,OAUpBN,EAAYM,GAVQ,kDAapBC,QAAQC,MAAR,wCAboB,yBAepBN,GAAa,GAfO,+CDUH,IAACG,ICVE,2BAAH,qDA2BrB,OAJA3C,qBAAU,WACRyC,MACC,IAGD,sBAAKhD,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd8C,IAAcF,GAAY,cAAC,EAAD,IAE1BA,GAAYxD,GACX,sBAAKY,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYZ,EAAY4B,MAGxB,wBACE1C,KAAK,SACL0B,UAAU,SACV,UAAQ,cACR,aAAW,aACXiB,QA7Ba,WACvBf,EAASgB,WAgCH,sBAAKlB,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGZ,EAAYsB,QAGf,oBAAGV,UAAU,QAAQ,UAAQ,aAA7B,UACGZ,EAAYqB,UAET,wBAAQT,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAEH,OACD,mBAAGsD,KAAI,iBAAYV,EAASW,OAA5B,SAAsCX,EAASY,oBClEhDC,EAAgB,WAC3B,MAAkCrD,oBAAS,GAA3C,mBAAO0C,EAAP,KAAkBC,EAAlB,KACA,EAA0C3C,oBAAS,GAAnD,mBAAOsD,EAAP,KAAsBC,EAAtB,KACMzD,EAAWP,IACXP,EAAcS,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAE5CwE,EAAW,uCAAG,4BAAAX,EAAA,6DAClBF,GAAa,GADK,kBFGQf,EAAY,UEHpB,OAIV6B,EAJU,OAMhB3D,EAAS4D,EAAiBD,IAE1BF,GAAiB,GARD,gDAWhBP,QAAQC,MAAR,yCAXgB,yBAahBN,GAAa,GAbG,4EAAH,qDAqBjB,OAJAxC,qBAAU,WACRqD,MACC,IAGD,qCACE,qBAAK5D,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACG8C,GACC,qBAAK9C,UAAU,QAAf,SACE,cAAC,EAAD,MAGH0D,GACC,qCACE,oBAAI1D,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,gBAQXZ,GAAe,cAAC,EAAD,QCzDhB2E,EAAO,kBACX,cAAC,IAAD,CAAUzE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN0E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.868af15b.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import {\n  Action,\n  Filter,\n  FilterActive,\n  FilterAll,\n  FilterCompleted,\n  QueryFilter,\n} from '../types/types';\n\nconst initialFilter: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst setQuery = (value: string): QueryFilter => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\nconst all = (): FilterAll => ({ type: 'filter/ALL', payload: 'all' });\nconst active = (): FilterActive => ({\n  type: 'filter/ACTIVE',\n  payload: 'active',\n});\nconst completed = (): FilterCompleted => ({\n  type: 'filter/COMPLETED',\n  payload: 'completed',\n});\n\nexport const actions = {\n  all,\n  active,\n  completed,\n  setQuery,\n};\n\nconst filterReducer = (\n  state: Filter = initialFilter,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/ACTIVE':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/ALL':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/COMPLETED':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\nimport { SetTodos, TodosAction, TodosState } from '../types/types';\n\nconst set = (value: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: value,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (\n  todos: TodosState = [],\n  action: TodosAction,\n): TodosState => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const NoMatches = () => (\n  <p className=\"notification is-warning\">\n    There are no todos matching current filter criteria\n  </p>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { NoMatches } from '../NoMatches';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todosList = useAppSelector((state) => state.todos);\n  const { query, status } = useAppSelector((state) => state.filter);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const [currentTodosList, setCurrentTodosList] = useState(todosList);\n\n  const handleTodosFilter = () => {\n    const statusFilteredList = todosList.filter((todo) => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n\n    const newTodosList = statusFilteredList\n      .filter((todo) => todo.title.toLowerCase().includes(query));\n\n    setCurrentTodosList(newTodosList);\n  };\n\n  const handleShowModal = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  useEffect(() => {\n    handleTodosFilter();\n  }, [query, status]);\n\n  return (\n    <>\n      {!currentTodosList.length ? (\n        <NoMatches />\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {currentTodosList.map((todo) => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={\n                      todo.completed ? 'has-text-success' : 'has-text-danger'\n                    }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleShowModal(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={\n                          todo.id === currentTodo?.id\n                            ? 'far fa-eye-slash'\n                            : 'far fa-eye'\n                        }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nconst isApplicableStatus = (value: string): value is Status => {\n  return ['all', 'active', 'completed'].includes(value);\n};\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newFilter = event.target.value;\n\n    if (isApplicableStatus(newFilter)) {\n      switch (newFilter) {\n        case 'active':\n          dispatch(filterActions.active());\n          break;\n\n        case 'all':\n          dispatch(filterActions.all());\n          break;\n\n        case 'completed':\n          dispatch(filterActions.completed());\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value.toLowerCase()));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clearSearchButton\"\n              onClick={handleQueryClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const [userInfo, setUserInfo] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleTodoModal = async () => {\n    if (!currentTodo) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const userInfoFromServer = await getUser(currentTodo.userId);\n\n      setUserInfo(userInfoFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(`Error on fetching user ${error}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    handleTodoModal();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && !userInfo && <Loader />}\n\n      {userInfo && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"closeModal\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n              {' by '}\n              <a href={`mailto:${userInfo.email}`}>{userInfo.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const handleFetch = async () => {\n    setIsLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.set(todosFromServer));\n\n      setIsInitialized(true);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(`Error on fetching todos ${error}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    handleFetch();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoading && (\n              <div className=\"block\">\n                <Loader />\n              </div>\n            )}\n            {isInitialized && (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}